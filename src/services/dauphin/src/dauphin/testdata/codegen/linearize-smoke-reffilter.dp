enum etest { X: string, Y: vec(boolean) };
enum etest2 { Z: etest, W: boolean };

struct stest { A: vec(number), B: etest };
struct zstest2 { M: stest };
enum etest3 { A: stest, B: etest, C: boolean, D: vec(vec(number)) };
proc assign(out _A, _A);
proc print_regs(_A);
func gt(number,number) becomes boolean;
func lt(number,number) becomes boolean;
func eq(number,number) becomes boolean;
proc bool_check(boolean);
inline ":=" assign left 14;
inline ">" gt left 6;
inline "<" lt left 6;
inline "==" eq left 5;
func oper_test(stest) becomes stest;

//e := [1,2];
//e[] := 3;
//print_regs(e);

e := [[1,2],[5,6]];
e[] := [3,4];
print_regs(e[]);

//e := [1,2];
//print_regs(e);
//e[] := [3,4][];
//print_regs(e);
//f := [[1,2],[3,4]];
//f[] := [7,8];
//print_regs(f);
//g := [[[[1,2],[3,4]],[[5,6],[7,8]]],[[[9,10],[11,12]],[[13,14],[15,16]]]];
//h := [[[0,0]]];