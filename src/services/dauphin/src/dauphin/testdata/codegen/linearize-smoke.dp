enum etest { X: string, Y: vec(boolean) };
enum etest2 { Z: etest, W: boolean };

struct stest { A: vec(number), B: etest };
struct zstest2 { M: stest };
enum etest3 { A: stest, B: etest, C: boolean, D: vec(vec(number)) };
proc assign(out _A, _A);
func gt(number,number) becomes boolean;
func lt(number,number) becomes boolean;
func eq(number,number) becomes boolean;
proc bool_check(boolean);
inline ":=" assign left 14;
inline ">" gt left 6;
inline "<" lt left 6;
inline "==" eq left 5;
func oper_test(stest) becomes stest;

//a := [[[1,2],[3]],[[4,5,6],[]]];
//b := a;

//c := [ etest:Y [false,true], etest:Y [true,false] ][$?Y];
//d := c!Y[@==1];
//bool_check(d);

//e := [1,2][[false,true][]];
//e := [[1,2],[3,4,5]][[false,true][]];
e := [1,2];
//f := e[][];
//g := e[@==0];
