import "lib:std";
use "std";

enum etest { X: string, Y: boolean };
enum etest2 { Z: etest, W: boolean };

struct stest { A: vec(number), B: etest };
struct zstest2 { M: stest };
enum etest3 { A: stest, B: etest, C: boolean, D: vec(vec(number)) };

func oper_test(stest) becomes stest;

x := 1;
x := stest { A: [1,2,3], B: etest:Y true };
y := x.B!Y;
x.A := [];
y := x.A;
w := oper_test(x);
z := [ stest { A: [1,2,3], B: etest:Y true },
       stest { A: [4,5,6], B: etest:Y false } ];
a := etest3:C true;
b := a!C;
c := a?A;
a := [etest:Y true, etest:Y false, etest:X "hi"];
f := a[]?Y;
f := *(a[$?Y]);
g := a[@==0];
d := etest3:D [[1,2],[3],[]];
e := d!D[];
a[@==0] := etest:X "lo";
a[]!X := "boo";
g := etest:Y true;
g!Y := false;
h := [etest:Y true,etest:Y false,etest:X "hi"];
h[]!Y := false;

x.A := [1,2,3];
x.A[$>1]&[$<3] := 5;
