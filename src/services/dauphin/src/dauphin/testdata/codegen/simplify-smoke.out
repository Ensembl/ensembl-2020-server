#lvalue %2 %1;
#number %3 1;
#call:assign:number/L:number/R %2 %3;
#lvalue %246 %244;
#lvalue %475 %472;
#lvalue %476 %473;
#lvalue %477 %474;
#nil %8;
#number %9 1;
#append %8 %9;
#number %10 2;
#append %8 %10;
#number %11 3;
#append %8 %11;
#star %7 %8;
#bool %13 true;
#string %299 "";
#number %298 1;
#copy %300 %13;
#copy %248 %7;
#copy %478 %298;
#copy %479 %299;
#copy %480 %300;
#call:assign:stest/L:stest/R %246 %475 %476 %477 %248 %478 %479 %480;
#lvalue %15 %14;
#copy %250 %244;
#copy %481 %472;
#copy %482 %473;
#copy %483 %474;
#copy %301 %481;
#copy %302 %482;
#copy %303 %483;
#number %554 1;
#numeq %553 %301 %554;
#filter %16 %303 %553;
#call:assign:boolean/L:boolean/R %15 %16;
#lvalue %252 %244;
#lvalue %484 %472;
#lvalue %485 %473;
#lvalue %486 %474;
#copy %20 %252;
#copy %21 %244;
#nil %23;
#star %22 %23;
#call:assign:vec(number)/L:vec(number)/R %20 %22;
#lvalue %25 %24;
#copy %254 %244;
#copy %487 %472;
#copy %488 %473;
#copy %489 %474;
#copy %26 %254;
#call:assign:vec(number)/L:vec(number)/R %25 %26;
#lvalue %258 %256;
#lvalue %493 %490;
#lvalue %494 %491;
#lvalue %495 %492;
#copy %262 %244;
#copy %499 %472;
#copy %500 %473;
#copy %501 %474;
#call:oper_test:stest/R:stest/R %260 %496 %497 %498 %262 %499 %500 %501;
#call:assign:stest/L:stest/R %258 %493 %494 %495 %260 %496 %497 %498;
#lvalue %266 %264;
#lvalue %505 %502;
#lvalue %506 %503;
#lvalue %507 %504;
#nil %270;
#nil %511;
#nil %512;
#nil %513;
#nil %38;
#number %39 1;
#append %38 %39;
#number %40 2;
#append %38 %40;
#number %41 3;
#append %38 %41;
#star %37 %38;
#bool %43 true;
#string %305 "";
#number %304 1;
#copy %306 %43;
#copy %272 %37;
#copy %514 %304;
#copy %515 %305;
#copy %516 %306;
#append %270 %272;
#append %511 %514;
#append %512 %515;
#append %513 %516;
#nil %46;
#number %47 4;
#append %46 %47;
#number %48 5;
#append %46 %48;
#number %49 6;
#append %46 %49;
#star %45 %46;
#bool %51 false;
#string %308 "";
#number %307 1;
#copy %309 %51;
#copy %274 %45;
#copy %517 %307;
#copy %518 %308;
#copy %519 %309;
#append %270 %274;
#append %511 %517;
#append %512 %518;
#append %513 %519;
#star %268 %270;
#star %508 %511;
#star %509 %512;
#star %510 %513;
#call:assign:vec(stest)/L:vec(stest)/R %266 %505 %506 %507 %268 %508 %509 %510;
#lvalue %191 %186;
#lvalue %282 %280;
#lvalue %529 %526;
#lvalue %530 %527;
#lvalue %531 %528;
#lvalue %442 %439;
#lvalue %443 %440;
#lvalue %444 %441;
#lvalue %194 %189;
#lvalue %195 %190;
#bool %55 true;
#list %231;
#string %233 "";
#number %466 0;
#copy %467 %233;
#bool %468 false;
#copy %284 %231;
#copy %532 %466;
#copy %533 %467;
#copy %534 %468;
#string %234 "";
#number %445 0;
#copy %446 %234;
#bool %447 false;
#number %196 2;
#copy %199 %55;
#list %200;
#call:assign:etest3/L:etest3/R %191 %282 %529 %530 %531 %442 %443 %444 %194 %195 %196 %284 %532 %533 %534 %445 %446 %447 %199 %200;
#lvalue %57 %56;
#copy %201 %186;
#copy %286 %280;
#copy %535 %526;
#copy %536 %527;
#copy %537 %528;
#copy %448 %439;
#copy %449 %440;
#copy %450 %441;
#copy %204 %189;
#copy %205 %190;
#number %236 2;
#numeq %235 %201 %236;
#filter %58 %204 %235;
#call:assign:boolean/L:boolean/R %57 %58;
#lvalue %61 %60;
#copy %206 %186;
#copy %288 %280;
#copy %538 %526;
#copy %539 %527;
#copy %540 %528;
#copy %451 %439;
#copy %452 %440;
#copy %453 %441;
#copy %209 %189;
#copy %210 %190;
#number %237 0;
#numeq %62 %206 %237;
#call:assign:boolean/L:boolean/R %61 %62;
#lvalue %313 %310;
#lvalue %314 %311;
#lvalue %315 %312;
#nil %319;
#nil %320;
#nil %321;
#bool %69 true;
#string %323 "";
#number %322 1;
#copy %324 %69;
#append %319 %322;
#append %320 %323;
#append %321 %324;
#bool %71 false;
#string %326 "";
#number %325 1;
#copy %327 %71;
#append %319 %325;
#append %320 %326;
#append %321 %327;
#string %73 "hi";
#number %328 0;
#copy %329 %73;
#bool %330 false;
#append %319 %328;
#append %320 %329;
#append %321 %330;
#star %316 %319;
#star %317 %320;
#star %318 %321;
#call:assign:vec(etest)/L:vec(etest)/R %313 %314 %315 %316 %317 %318;
#lvalue %75 %74;
#copy %334 %310;
#copy %335 %311;
#copy %336 %312;
#square %331 %334;
#square %332 %335;
#square %333 %336;
#number %555 1;
#numeq %76 %331 %555;
#call:assign:boolean/L:boolean/R %75 %76;
#lvalue %340 %337;
#lvalue %341 %338;
#lvalue %342 %339;
#copy %349 %310;
#copy %350 %311;
#copy %351 %312;
#at %84 %349;
#square %352 %349;
#square %353 %350;
#square %354 %351;
#copy %355 %352;
#copy %356 %353;
#copy %357 %354;
#number %556 1;
#numeq %86 %355 %556;
#filter %346 %352 %86;
#filter %347 %353 %86;
#filter %348 %354 %86;
#star %343 %346;
#star %344 %347;
#star %345 %348;
#call:assign:vec(etest)/L:vec(etest)/R %340 %341 %342 %343 %344 %345;
#lvalue %361 %358;
#lvalue %362 %359;
#lvalue %363 %360;
#copy %367 %310;
#copy %368 %311;
#copy %369 %312;
#at %92 %367;
#square %370 %367;
#square %371 %368;
#square %372 %369;
#copy %95 %92;
#number %96 0;
#call:eq:boolean/R:number/R:number/R %94 %95 %96;
#filter %364 %370 %94;
#filter %365 %371 %94;
#filter %366 %372 %94;
#call:assign:etest/L:etest/R %361 %362 %363 %364 %365 %366;
#lvalue %216 %211;
#lvalue %292 %290;
#lvalue %544 %541;
#lvalue %545 %542;
#lvalue %546 %543;
#lvalue %457 %454;
#lvalue %458 %455;
#lvalue %459 %456;
#lvalue %219 %214;
#lvalue %220 %215;
#nil %101;
#nil %103;
#number %104 1;
#append %103 %104;
#number %105 2;
#append %103 %105;
#star %102 %103;
#append %101 %102;
#nil %107;
#number %108 3;
#append %107 %108;
#star %106 %107;
#append %101 %106;
#nil %110;
#star %109 %110;
#append %101 %109;
#star %100 %101;
#list %238;
#string %240 "";
#number %469 0;
#copy %470 %240;
#bool %471 false;
#copy %294 %238;
#copy %547 %469;
#copy %548 %470;
#copy %549 %471;
#string %241 "";
#number %460 0;
#copy %461 %241;
#bool %462 false;
#bool %224 false;
#number %221 3;
#copy %225 %100;
#call:assign:etest3/L:etest3/R %216 %292 %544 %545 %546 %457 %458 %459 %219 %220 %221 %294 %547 %548 %549 %460 %461 %462 %224 %225;
#lvalue %112 %111;
#copy %226 %211;
#copy %296 %290;
#copy %550 %541;
#copy %551 %542;
#copy %552 %543;
#copy %463 %454;
#copy %464 %455;
#copy %465 %456;
#copy %229 %214;
#copy %230 %215;
#number %243 3;
#numeq %242 %226 %243;
#filter %114 %230 %242;
#square %113 %114;
#call:assign:vec(number)/L:vec(number)/R %112 %113;
#lvalue %373 %310;
#lvalue %374 %311;
#lvalue %375 %312;
#refsquare %376 %373;
#refsquare %377 %374;
#refsquare %378 %375;
#square %379 %310;
#square %380 %311;
#square %381 %312;
#filtersquare %119 %310;
#at %120 %310;
#copy %122 %120;
#number %123 0;
#call:eq:boolean/R:number/R:number/R %121 %122 %123;
#filter %124 %119 %121;
#filter %382 %379 %121;
#filter %383 %380 %121;
#filter %384 %381 %121;
#string %127 "lo";
#number %385 0;
#copy %386 %127;
#bool %387 false;
#call:assign:number/F:etest/L:etest/R %124 %376 %377 %378 %385 %386 %387;
#lvalue %388 %310;
#lvalue %389 %311;
#lvalue %390 %312;
#refsquare %391 %388;
#refsquare %392 %389;
#refsquare %393 %390;
#square %394 %310;
#square %395 %311;
#square %396 %312;
#filtersquare %131 %310;
#number %558 0;
#numeq %557 %391 %558;
#filter %132 %392 %557;
#number %560 0;
#numeq %559 %394 %560;
#filter %133 %395 %559;
#string %134 "boo";
#call:assign:number/F:string/L:string/R %131 %132 %134;
#lvalue %400 %397;
#lvalue %401 %398;
#lvalue %402 %399;
#bool %138 true;
#string %404 "";
#number %403 1;
#copy %405 %138;
#call:assign:etest/L:etest/R %400 %401 %402 %403 %404 %405;
#lvalue %406 %397;
#lvalue %407 %398;
#lvalue %408 %399;
#number %562 1;
#numeq %561 %406 %562;
#filter %140 %408 %561;
#number %564 1;
#numeq %563 %397 %564;
#filter %141 %399 %563;
#bool %142 false;
#call:assign:boolean/L:boolean/R %140 %142;
#lvalue %412 %409;
#lvalue %413 %410;
#lvalue %414 %411;
#nil %418;
#nil %419;
#nil %420;
#bool %148 true;
#string %422 "";
#number %421 1;
#copy %423 %148;
#append %418 %421;
#append %419 %422;
#append %420 %423;
#bool %150 false;
#string %425 "";
#number %424 1;
#copy %426 %150;
#append %418 %424;
#append %419 %425;
#append %420 %426;
#string %152 "hi";
#number %427 0;
#copy %428 %152;
#bool %429 false;
#append %418 %427;
#append %419 %428;
#append %420 %429;
#star %415 %418;
#star %416 %419;
#star %417 %420;
#call:assign:vec(etest)/L:vec(etest)/R %412 %413 %414 %415 %416 %417;
#lvalue %430 %409;
#lvalue %431 %410;
#lvalue %432 %411;
#refsquare %433 %430;
#refsquare %434 %431;
#refsquare %435 %432;
#square %436 %409;
#square %437 %410;
#square %438 %411;
#filtersquare %156 %409;
#number %566 1;
#numeq %565 %433 %566;
#filter %157 %435 %565;
#number %568 1;
#numeq %567 %436 %568;
#filter %158 %438 %567;
#bool %159 false;
#call:assign:number/F:boolean/L:boolean/R %156 %157 %159;
#lvalue %276 %244;
#lvalue %520 %472;
#lvalue %521 %473;
#lvalue %522 %474;
#copy %161 %276;
#copy %162 %244;
#nil %164;
#number %165 1;
#append %164 %165;
#number %166 2;
#append %164 %166;
#number %167 3;
#append %164 %167;
#star %163 %164;
#call:assign:vec(number)/L:vec(number)/R %161 %163;
#lvalue %278 %244;
#lvalue %523 %472;
#lvalue %524 %473;
#lvalue %525 %474;
#copy %169 %278;
#copy %170 %244;
#refsquare %171 %169;
#square %172 %170;
#filtersquare %173 %170;
#at %174 %170;
#copy %176 %172;
#number %177 1;
#call:gt:boolean/R:number/R:number/R %175 %176 %177;
#filter %178 %173 %175;
#filter %179 %172 %175;
#copy %181 %179;
#number %182 3;
#call:lt:boolean/R:number/R:number/R %180 %181 %182;
#filter %183 %178 %180;
#filter %184 %179 %180;
#number %185 5;
#call:assign:number/F:number/L:number/R %183 %171 %185;
