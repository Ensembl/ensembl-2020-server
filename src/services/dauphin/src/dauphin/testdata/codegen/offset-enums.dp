enum etest {
    X: boolean,
    Y: bytes
};

enum etest2 {
    A: etest,
    B: vec(etest)
};

struct stest {
    M: vec(etest2),
    N: etest
};

proc assign(out _A, _A);
inline ":=" assign left 14;
func eq(number,number) becomes boolean;
inline "==" eq left 5;
proc print_vec(_);
proc assert(_,_);

y := etest2:B [ etest:X false, etest:X true ];

x := stest {
    M: [y,y,y],
    N: etest:X true
};

x.M[@==1]!B[@==0]!X := true;
x.M[@==2]!B[@==1]!X := false;

assert(x.M[@==1]!B[@==0]!X,true);
assert(x.M[@==0]!B[@==0]!X,false);
assert(x.M[@==2]!B[@==0]!X,false);

assert(x.M[@==2]!B[@==1]!X,false);
assert(x.M[@==0]!B[@==1]!X,true);
assert(x.M[@==1]!B[@==1]!X,true);
