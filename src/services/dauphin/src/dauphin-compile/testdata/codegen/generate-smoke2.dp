enum etest { X: string, Y: boolean };
enum etest2 { Z: etest, W: boolean };
struct stest { A: vec(number), B: etest };
struct zstest2 { M: stest };
proc assign(stomp mask _A, _A);
func gt(number,number) becomes boolean;
func lt(number,number) becomes boolean;
func eq(number,number) becomes boolean;
inline ":=" assign left 14;
inline ">" gt left 6;
inline "<" lt left 6;
inline "==" eq left 5;

x := [1,2,3];
y := "hello";
z := stest { B: etest:X y, A: x };
a := z.B;
b := z.B?X;
c := z.B!X;
y := *x[];

x := [[1,2],[3,4]];
y := x[@>0][$<3];

z.A := [];
w := zstest2 { M: z };
w.M.A := [0];
w := 14;
w := 15 > 12;

y := "boo";
m := etest2:Z etest:X y;
m!Z!X := "hi";
x[] := [0,0];

x[@>0] := [1,1];
x := [[1,2],[3,4]];
x[@>0][$>0] := 2;
z.A := x[@==0];
z.A[@==0] := 4;

z.A[@>0]&[$<10] := 5;
